Shader "Hidden/CreateCustomNormals"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    	CGINCLUDE
	
	#include "UnityCG.cginc"
	#include "UnityPBSLighting.cginc"
    #include "UnityStandardBRDF.cginc"
    #include "UnityStandardUtils.cginc"

	#include "Utils.cginc"
	#include "NoiseLib.cginc"
    SubShader
    {
        // No culling or depth
        Cull Off ZWrite Off ZTest Always

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            sampler2D _MainTex;

            // Get a cosine-weighted random vector centered around a specified normal direction.
            float3 GetCosHemisphereSample(float rand1, float rand2, float3 hitNorm)
            {
	            // Get 2 random numbers to select our sample with
                float2 randVal = float2(rand1, rand2);

	            // Cosine weighted hemisphere sample from RNG
                float3 bitangent = getPerpendicularVector(hitNorm);
                float3 tangent = cross(bitangent, hitNorm);
                float r = sqrt(randVal.x);
                float phi = 2.0f * 3.14159265f * randVal.y;

	            // Get our cosine-weighted hemisphere lobe sample direction
                return tangent * (r * cos(phi).x) + bitangent * (r * sin(phi)) + hitNorm.xyz * sqrt(max(0.0, 1.0f - randVal.x));
            }


            fixed4 frag (v2f i) : SV_Target
            {
                float2 uv = i.uv;
		        int2 pos = uv * _ScreenSize.xy;

		        float4 worldNormal = GetNormal (uv);
                // Blue noise generated by https://github.com/bartwronski/BlueNoiseGenerator/
		        float2 blueNoise = tex2D(_Noise, (uv) * _ScreenSize.xy / _NoiseSize.xy) * 2.0 - 1.0;
                float3 stochasticNormal = GetCosHemisphereSample(blueNoise.x, blueNoise.y, worldNormal);

                return normalize(stochasticNormal);
            }
            ENDCG
        }
    }
}
